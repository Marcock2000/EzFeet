  /* eslint-disable @typescript-eslint/no-floating-promises */
  /* eslint-disable @typescript-eslint/no-misused-promises */
  import { type NextPage } from "next";
  import Head from "next/head";
  import { api } from "~/utils/api";
  import { useForm } from "react-hook-form";
  import { useRouter } from "next/router";
  import { UploadButton, UploadDropzone } from "~/utils/uploadthing";
  import { useState } from "react";
  import { string } from "zod";

  type SellItemForm = {
    name: string;
    description: string;
    price: string;
    imageUrl: string;
  };


  const SellAnItem: NextPage = () => {
    const createListing = api.listings.create.useMutation();
    const router = useRouter();
    const [image, setImage] = useState<string>(""); // Specify 'string' as the type and provide an initial value of an empty string

    const handleUrl = (res: { fileUrl: string; fileKey: string }[] | undefined) => {
      if (res && res.length > 0) {
        setImage(res[0].fileUrl);
      }
    };

    const { register, handleSubmit } = useForm<SellItemForm>();
    const onSubmit = (formData: SellItemForm) => {
      createListing
        .mutateAsync({
          ...formData,
          price: parseFloat(formData.price),
          imageUrl: image
        })
        .then(() => {
          router.push("/");
        });
    };

    return (
      <>
        <Head>
          <title>Sell an Item</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className="flex min-h-screen flex-col items-center justify-center bg-gray-800">
          <div className="container flex flex-col gap-12 px-4 py-16 ">
            <h1 className="text-4xl">Sell an Item</h1>
            <form
              className="flex flex-col gap-4"
              onSubmit={handleSubmit(onSubmit)}
            >
              <div>
                <label
                  htmlFor="name"
                  className="mb-2 block text-sm font-medium text-gray-200 dark:text-white"
                >
                  Item Name
                </label>
                <input
                  id="name"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 "
                  {...register("name", { required: true })}
                />
              </div>

              <div>
                <label
                  htmlFor="description"
                  className="mb-2 block text-sm font-medium text-gray-200 dark:text-white"
                >
                  Description
                </label>
                <textarea
                  id="description"
                  className="block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 "
                  {...register("description", { required: true })}
                />
              </div>

              <div>
                <label
                  htmlFor="price"
                  className="mb-2 block text-sm font-medium text-gray-200"
                >
                  Price
                </label>
                <input
                  id="price"
                  type="number"
                  step="0.01"
                  className="block w-full rounded-lg border border-gray-900 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-blue-500 focus:ring-blue-500 "
                  {...register("price", { required: true })}
                />
              </div>
                <div className="flex rounded-lg flex-row  items-center justify-center text-gray-200 font-bold text-justify">
              <UploadDropzone
                
                endpoint="imageUploader"
                onClientUploadComplete={(res) => {
                  alert("Picture uploaded successfuly")
                  handleUrl(res)
                }}
                onUploadError={(error: Error) => {
                  // Do something with the error.
                  alert(`ERROR! ${error.message}`);
                
                }
               } />
              </div>

              <button
                type="submit"
                className="mb-2 mr-2 rounded-lg bg-blue-700 px-5 py-2.5 text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
              >
                Create
              </button>
            </form>
          </div>
        </main>
      </>
    );
  };

  export default SellAnItem;
